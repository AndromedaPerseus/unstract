# Generated by Django 4.2.1 on 2024-07-14 08:57

import uuid

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("prompt_studio_core", "0014_customtool_tag_id"),
        ("prompt_studio", "0007_remove_toolstudioprompt_assert_prompt_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="TagManager",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        db_comment="Field to store the UUID for the tag manager",
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("tag", models.TextField(db_comment="Field to store the tag")),
                (
                    "tool",
                    models.ForeignKey(
                        db_comment="Field to store the reference to the tool associated with the tag",
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="prompt_studio_core.customtool",
                    ),
                ),
            ],
            options={
                "db_table": "prompt_studio_tag_manager",
            },
        ),
        migrations.CreateModel(
            name="TagManagerHelper",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        db_comment="Field to store the UUID for the tag manager helper",
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("sequence_number", models.IntegerField(blank=True, null=True)),
                (
                    "prompt_type",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("PROMPT", "Response sent as Text"),
                            ("NOTES", "Response sent as float"),
                        ],
                        db_comment="Field to store the type of the input prompt",
                    ),
                ),
                (
                    "version",
                    models.CharField(db_comment="Version of prompt", max_length=10),
                ),
                (
                    "prompt_id",
                    models.ForeignKey(
                        db_comment="Field to store the prompt associated with the helper",
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="prompt_studio.toolstudioprompt",
                    ),
                ),
                (
                    "tag_manager",
                    models.ForeignKey(
                        db_comment="Field to store the tag manager associated with the helper",
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tag_manager.tagmanager",
                    ),
                ),
            ],
            options={
                "db_table": "prompt_studio_tag_manager_helper",
            },
        ),
        migrations.AddConstraint(
            model_name="tagmanagerhelper",
            constraint=models.UniqueConstraint(
                fields=("tag_manager", "prompt_id"), name="unique_tag_manager_prompt_id"
            ),
        ),
        migrations.AddConstraint(
            model_name="tagmanager",
            constraint=models.UniqueConstraint(
                fields=("tool", "tag"), name="unique_tool_tag"
            ),
        ),
    ]
