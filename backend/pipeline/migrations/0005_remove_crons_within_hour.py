# Generated by Django 4.2.1 on 2024-09-17 09:38
import logging
from typing import Any

from django.db import migrations
from scheduler.helper import SchedulerHelper

logger = logging.getLogger()


def is_cron_valid(minute_field: str) -> bool:
    if minute_field == "*" or any(char in minute_field for char in [",", "-", "/"]):
        return False
    return True


class Migration(migrations.Migration):

    dependencies = [
        ("pipeline", "0004_alter_pipeline_cron_string"),
    ]

    def correct_cron_within_hour(apps: Any, schema_editor: Any) -> None:
        """Corrects invalid cron (<1 hour frequency) for existing pipelines.

        An invalid cron has '*' in the minute field or any of the chars
        ',','-','/' in it. This gets replaced with either 0 or the first minute
        value specified.

        Parameters:
            apps (Any): The registry of installed applications.
            schema_editor (Any): The schema editor for the database operation.

        Returns:
            None: This method does not return anything.
        """
        Pipeline = apps.get_model("pipeline", "Pipeline")
        pipelines_to_update = Pipeline.objects.all()

        for pipeline in pipelines_to_update:
            # Skip for pipelines where cron is not present
            if not pipeline.cron_string:
                continue

            cron_parts = pipeline.cron_string.split()
            minute_field = cron_parts[0]
            # Skip for pipelines where cron is valid
            if is_cron_valid(minute_field):
                continue

            logger.info(
                f"Updating pipeline {pipeline.id} which has "
                f"cron {pipeline.cron_string}"
            )
            # For every minute or every 'x' minute
            if minute_field == "*" or "/" in minute_field:
                cron_parts[0] = "0"
            # Both ',' and '-' are present, resolve based on first occurence
            elif all(char in minute_field for char in [",", "-"]):
                if minute_field.find(",") < minute_field.find("-"):
                    cron_parts[0] = minute_field.split(",")[0]
                else:
                    cron_parts[0] = minute_field.split("-")[0]
            elif "-" in minute_field:
                cron_parts[0] = minute_field.split("-")[0]
            elif "," in minute_field:
                cron_parts[0] = minute_field.split(",")[0]

            # Save the correct cron string
            pipeline.cron_string = " ".join(cron_parts)
            pipeline.save()

            # Updates celery-beat related tables
            SchedulerHelper.add_or_update_job(pipeline=pipeline)

    operations = [
        migrations.RunPython(
            correct_cron_within_hour,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
